<Microsoft.AspNetCore.Components.Web.Extensions.Head.Title Value="The last time"></Microsoft.AspNetCore.Components.Web.Extensions.Head.Title>

@if (bootswatchThemeDict.ContainsKey(BootswatchTheme))
{
    <Microsoft.AspNetCore.Components.Web.Extensions.Head.Link rel="stylesheet" href="@("https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/" + BootswatchTheme + "/bootstrap.min.css")" integrity="@(bootswatchThemeDict[BootswatchTheme])" crossorigin="anonymous" />
}
else
{
    <Microsoft.AspNetCore.Components.Web.Extensions.Head.Link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous" />
}

<div class="top-row navbar navbar-dark bg-primary">
    <a class="navbar-text" href="">When was the last time?</a>

    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass">
    <ul class="nav flex-column">

        <li class="nav-item p-2">
            <Button Color="Color.Primary" Size="@ButtonSize" Block="true" @onclick="@(() => ExportFile())">Export</Button>
        </li>
        <li class="nav-item p-2">
            <label for="file-upload" class="d-block btn @ButtonSizeClass btn-primary mb-0">Import</label>
            <InputFile id="file-upload" class="d-none" OnChange="@ImportFile" />
        </li>
        <li class="nav-item p-2">
            <Button Color="Color.Primary" Size="@ButtonSize" Block="true" @onclick="@(async () => { await DataService.ClearData(); NavigationManager.NavigateTo("/", true); })">Delete all</Button>
        </li>

        <li class="nav-item px-2 py-1">
            <EditForm Model="@ElementSize">
                <label for="size" class="text-light">Size:</label>
                <InputSelect id="size" size="3" class="form-control form-control-sm" Value="@ElementSize" ValueExpression="@(() => ElementSize)" ValueChanged="async (string val) => { ElementSize = val; }">
                    @foreach (var size in elementSizes)
                    {
                        <option value="@size">@size</option>
                    }
                </InputSelect>
            </EditForm>
        </li>

        <li class="nav-item px-2 py-1">
            <EditForm Model="@BootswatchTheme">
                <label for="theme" class="text-light">Theme:</label>
                <InputSelect id="theme" size="@(bootswatchThemeDict.Count + 1)" class="form-control form-control-sm" Value="@BootswatchTheme" ValueExpression="@(() => BootswatchTheme)" ValueChanged="async (string val) => { BootswatchTheme = val; }">
                    <option value="default">default</option>
                    @foreach (var theme in bootswatchThemeDict.Keys)
                    {
                        <option value="@theme">@theme</option>
                    }
                </InputSelect>
            </EditForm>
        </li>

    </ul>
</div>
