@page "/"
@inject IIndexedDbFactory DbFactory

<div class="container-fluid py-3 d-flex flex-grow-1">
    <div id="overlay-parent" class="row flex-grow-1">
        <div class="col-md-12 col-lg-6">
            <fieldset>
                <EditForm Model="@newCategory" OnValidSubmit="@SaveNewCategory">
                    <InputText class="form-control form-control-sm" @bind-Value="@newCategory.Description" placeholder="Add new category..." />
                    <button type="submit" class="btn btn-sm btn-primary">Save Category</button>

                    <p><Microsoft.AspNetCore.Components.Forms.ValidationSummary /></p>
                    <DataAnnotationsValidator />
                </EditForm>
            </fieldset>

            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">New Category</button>
            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">Edit Category</button>

            @if (categoryList != null)
            {
                <fieldset>
                    <EditForm Model="@selectedCategory">
                        <InputSelect class="form-control form-control-sm" Value="@selectedCategory.Id" ValueExpression="@(() => selectedCategory.Id)" ValueChanged="async (long val) => { selectedCategory.Id = val; /* await LoadHabitList(); */ }">
                            <option value="0">All categories</option>
                            @foreach (var cat in categoryList)
                            {
                                <option value="@cat.Id">@cat.Description</option>
                            }
                        </InputSelect>

                        @if (selectedCategory.Id != 0)
                        {
                            <button class="btn btn-sm btn-primary" @onclick="@(() => DeleteCategory(selectedCategory))">Delete Category</button>
                        }
                    </EditForm>
                </fieldset>
            }

            @if (habitList != null)
            {
                <div class="accordion" id="accordion-parent">

                    @*<div class="card">
                        <div class="card-header">
                            <button class="btn" data-toggle="collapse" data-target="#collapseOne">
                            </button>
                        </div>
                        <div id="collapseOne" class="collapse show" data-parent="#accordion-parent">
                            <div class="card-body">
                            </div>
                        </div>
                    </div>*@

                    @foreach (var habit in habitList.Where(habit => habit.CategoryId == selectedCategory.Id || selectedCategory.Id == 0))
                    {
                        <div class="card">
                            <button class="card-header collapsed btn d-flex" data-toggle="collapse" data-target="@("#collapse-" + habit.Id)">
                                <div class="m-1">@habit.Description</div>
                                <div class="m-1 ml-auto">@(habit.TimeList.Count > 0 ? habit.TimeList.Last().DateTime : "Never")</div>
                            </button>
                            <div id="@("collapse-" + habit.Id)" class="collapse" data-parent="#accordion-parent">
                                <div class="card-body p-3 d-flex">
                                    <div class="m-1"><button class="btn btn-sm btn-primary" @onclick="@(() => { selectedHabit = habit; })">Details</button></div>
                                    <div class="m-1 ml-auto"><button class="btn btn-sm btn-primary" @onclick="@(() => DoneHabit(habit))">Done</button></div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            }

            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">New Habit</button>

            <fieldset>
                <EditForm Model="@newHabit" OnValidSubmit="@SaveNewHabit">
                    <InputText class="form-control form-control-sm" @bind-Value="@newHabit.Description" placeholder="Add new habit..." />
                    <button type="submit" class="btn btn-sm btn-primary">Save Habit</button>

                    <p><Microsoft.AspNetCore.Components.Forms.ValidationSummary /></p>
                    <DataAnnotationsValidator />
                </EditForm>
            </fieldset>

            <InputFile class="form-control form-control-sm" OnChange="@ImportFile" />

            <p>
                @text
            </p>

            <button class="btn btn-sm btn-primary" @onclick="@(() => ExportFile())">Export</button>
        </div>
        @if (selectedHabit != null)
        {
            <div id="overlay" class="col-md-12 col-lg-6 d-flex">
                <div class="card flex-grow-1">
                    <div class="card-body">

                        <button class="close" @onclick="@(() => { selectedHabit = null; })">&#10005;</button>

                        <button class="btn btn-sm btn-primary" @onclick="@(() => {})">Change category</button>
                        <div class="m-1"><button class="btn btn-sm btn-primary" @onclick="@(() => {})">Edit Habit</button></div>
                        <div class="m-1"><button class="btn btn-sm btn-primary" @onclick="@(() => DeleteHabit(selectedHabit))">Delete Habit</button></div>

                        @foreach (var time in timeList.Where(t => t.HabitId == selectedHabit.Id))
                        {
                            <div>@time.DateTime</div>

                            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">Delete Time</button>
                            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">Edit Time</button>
                            <button class="btn btn-sm btn-primary" @onclick="@(() => {})">Save Time</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>