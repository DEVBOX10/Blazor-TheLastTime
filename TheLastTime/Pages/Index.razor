@page "/"
@page "/{SeedExamples}"

<div class="container-fluid px-1 px-sm-0 py-2 py-sm-3 d-flex flex-grow-1">
    <div id="overlay-parent" class="row mx-0 flex-grow-1">

        <div class="col-md-12 col-lg-6 px-1 px-sm-3">
            @if (editCategory)
            {
                <div class="input-group flex-nowrap">
                    <TextEdit Size="@State.Size" @bind-Text="@selectedCategory.Description" Placeholder="Add new category..." />
                    <div class="input-group-append">
                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.SaveCategory(selectedCategory); editCategory = false; })"><span class="fa fa-save"></span></Button>
                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { editCategory = false; })"><span class="fa fa-times"></span></Button>
                    </div>
                </div>
            }
            else
            {
                <div class="input-group flex-nowrap">
                    <div class="input-group-prepend">
                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { selectedCategory = new Category(); editCategory = true; })"><span class="fa fa-plus"></span></Button>
                    </div>

                    <Select TValue="long" Size="@State.Size" SelectedValue="@selectedCategoryId" SelectedValueChanged="async (long val) => { selectedCategoryId = val; if (DataService.CategoryDict.ContainsKey(val)) { selectedCategory = DataService.CategoryDict[val]; } }">
                        <SelectItem Value="0">All categories</SelectItem>
                        @foreach (Category cat in DataService.CategoryList)
                        {
                            <SelectItem Value="@cat.Id">@cat.Description</SelectItem>
                        }
                    </Select>

                    @if (selectedCategoryId > 1)
                    {
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { editCategory = true; })"><span class="fa fa-edit"></span></Button>

                            <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.DeleteCategory(selectedCategory); selectedCategoryId = 0; })"><span class="fa fa-trash-alt"></span></Button>
                        </div>
                    }
                </div>
            }

            <div>
                @foreach (Habit habit in DataService.HabitList.Where(habit => habit.CategoryId == selectedCategoryId || selectedCategoryId == 0))
                {
                    <div class="input-group flex-nowrap my-1">
                        <div class="input-group-prepend flex-grow-1">
                            <div class="btn btn-secondary @State.ButtonSizeClass border border-right-0 flex-grow-1 d-flex" @onclick="@(() => { selectedHabit = habit; })">
                                <div class="m-1">@habit.Description</div>
                                <div class="m-1 ml-auto">@(habit.TimeList.Count > 0 ? ToReadableString(DateTime.Now - habit.TimeList.Last().DateTime) + " ago" : "Never")</div>
                            </div>
                        </div>
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.SaveTime(new Time { HabitId = habit.Id, DateTime = DateTime.Now }); if (selectedHabit != null) { selectedHabit = DataService.HabitDict[habit.Id]; } })"><span class="fa fa-check"></span></Button>
                        </div>
                    </div>
                }
            </div>

            <div class="py-5"></div>

            <Button class="btn btn-lg btn-primary rounded-circle add-habit" @onclick="@(() => { selectedHabit = new Habit{ CategoryId = selectedCategoryId != 0 ? selectedCategoryId : 1 }; editHabit = true; })"><span class="fa fa-plus"></span></Button>
        </div>

        @if (selectedHabit != null)
        {
            <div id="overlay" class="col-md-12 col-lg-6 px-1 px-sm-3 d-flex">
                <div class="card flex-grow-1">

                    <div class="card-body p-2 p-sm-3">
                        <Button class="close" @onclick="@(() => { selectedHabit = null; })"><span class="fa fa-times"></span></Button>

                        <div style="padding-right: 40px;">

                            <Select TValue="long" Size="@State.Size" SelectedValue="@selectedHabit.CategoryId" SelectedValueChanged="async (long val) => { selectedHabit.CategoryId = val; if (!editHabit) { await DataService.SaveHabit(selectedHabit); } }">
                                @foreach (Category cat in DataService.CategoryList)
                                {
                                    <SelectItem Value="@cat.Id">@cat.Description</SelectItem>
                                }
                            </Select>

                        </div>

                        @if (editHabit)
                        {
                            <div class="input-group flex-nowrap my-3">
                                <TextEdit Size="@State.Size" @bind-Text="@selectedHabit.Description" Placeholder="Add new habit..." />
                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.SaveHabit(selectedHabit); editHabit = false; })"><span class="fa fa-save"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { editHabit = false; })"><span class="fa fa-times"></span></Button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="input-group flex-nowrap my-3 d-flex">

                                <TextEdit Size="@State.Size" ReadOnly="true" Text="@selectedHabit.Description" />

                                <div class="input-group-append">
                                    <TextEdit Class="rounded-0 border-right-0" Size="@State.Size" ReadOnly="true" Text="@(selectedHabit.TimeList.Count + "x")" VisibleCharacters="@((selectedHabit.TimeList.Count + "x").Length)" />

                                    <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { editHabit = true; })"><span class="fa fa-edit"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.DeleteHabit(selectedHabit); selectedHabit = null; })"><span class="fa fa-trash-alt"></span></Button>
                                </div>
                            </div>
                        }

                        @if (selectedHabit.TimeList.Count > 1)
                        {
                            <p>@( "On average, every: " + ToReadableString(TimeSpan.FromMilliseconds(selectedHabit.TimeList.Zip(selectedHabit.TimeList.Skip(1), (x, y) => (y.DateTime - x.DateTime).TotalMilliseconds).Average())) )</p>
                        }

                        @foreach (Time time in selectedHabit.TimeList.OrderByDescending(t => t.DateTime))
                        {
                            @if (editTime && selectedTime == time)
                            {
                                <div class="input-group flex-nowrap mb-1">
                                    <DateEdit TValue="DateTime" Size="@State.Size" Date="@time.DateTime" DateChanged="@((dateTime) => { time.DateTime = dateTime.Date + time.DateTime.TimeOfDay; })" />
                                    <TimeEdit TValue="TimeSpan" Size="@State.Size" Time="@time.DateTime.TimeOfDay" TimeChanged="@((timeSpan) => { time.DateTime = time.DateTime.Date + timeSpan; })" />
                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.SaveTime(time); selectedTime = null; editTime = false; })"><span class="fa fa-save"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { selectedTime = null; editTime = false; })"><span class="fa fa-times"></span></Button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="input-group flex-nowrap mb-1 d-flex">
                                    @*<DateEdit TValue="DateTime" Size="@State.Size" ReadOnly="true" Date="@time.DateTime" />
                                    <TimeEdit TValue="TimeSpan" Size="@State.Size" ReadOnly="true" Time="@time.DateTime.TimeOfDay" />*@

                                    <TextEdit Size="@State.Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time.DateTime) + " ago")" />

                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(() => { selectedTime = time; editTime = true; })"><span class="fa fa-edit"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@State.ButtonSize" @onclick="@(async () => { await DataService.DeleteTime(time); selectedHabit = DataService.HabitDict[time.HabitId]; })"><span class="fa fa-trash-alt"></span></Button>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                </div>
            </div>
        }
    </div>
</div>