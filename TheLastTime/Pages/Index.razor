@page "/"

<div class="container-fluid py-3 d-flex flex-grow-1">
    <div id="overlay-parent" class="row flex-grow-1">
        <div class="col-md-12 col-lg-6">

            @if (editCategory)
            {
                <EditForm Model="@selectedCategory" OnValidSubmit="@(async () => { await DataService.SaveCategory(selectedCategory); editCategory = false; })">

                    <div class="input-group">
                        <InputText class="form-control form-control-sm" @bind-Value="@selectedCategory.Description" placeholder="Add new category..." />
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" Type="ButtonType.Submit"><span class="fa fa-save"></span></Button>
                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { editCategory = false; })"><span class="fa fa-times"></span></Button>
                        </div>
                    </div>

                    <div><Microsoft.AspNetCore.Components.Forms.ValidationSummary /></div>
                    <DataAnnotationsValidator />

                </EditForm>
            }
            else
            {
                <EditForm Model="@selectedCategoryId">

                    <div class="input-group">
                        <div class="input-group-prepend">
                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { selectedCategory = new Category(); editCategory = true; })"><span class="fa fa-plus"></span></Button>
                        </div>

                        <InputSelect class="form-control form-control-sm" Value="@selectedCategoryId" ValueExpression="@(() => selectedCategoryId)" ValueChanged="async (long val) => { selectedCategoryId = val; if (DataService.CategoryDict.ContainsKey(val)) { selectedCategory = DataService.CategoryDict[val]; } }">
                            <option value="0">All categories</option>
                            @foreach (var cat in DataService.CategoryList)
                            {
                                <option value="@cat.Id">@cat.Description</option>
                            }
                        </InputSelect>

                        @if (selectedCategoryId > 1)
                        {
                            <div class="input-group-append">
                                <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { editCategory = true; })"><span class="fa fa-edit"></span></Button>

                                <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(async () => { await DataService.DeleteCategory(selectedCategory); selectedCategoryId = 0; })"><span class="fa fa-trash-alt"></span></Button>
                            </div>
                        }
                    </div>

                </EditForm>
            }

            <div class="">
                @foreach (var habit in DataService.HabitList.Where(habit => habit.CategoryId == selectedCategoryId || selectedCategoryId == 0))
                {
                    <div class="input-group my-1">
                        <div class="input-group-prepend flex-grow-1">
                            <div class="btn btn-secondary border border-right-0 flex-grow-1 d-flex" @onclick="@(() => { selectedHabit = habit; })">
                                <div class="m-1">@habit.Description</div>
                                <div class="m-1 ml-auto">@(habit.TimeList.Count > 0 ? habit.TimeList.Last().DateTime : "Never")</div>
                            </div>
                        </div>
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(async () => { await DataService.SaveTime(new Time { HabitId = habit.Id, DateTime = DateTime.Now }); if (selectedHabit != null) { selectedHabit = DataService.HabitDict[habit.Id]; } })"><span class="fa fa-check"></span></Button>
                        </div>
                    </div>
                }
            </div>

            <div class="py-5"></div>

            <Button class="btn btn-lg btn-primary rounded-circle add-habit" @onclick="@(() => { selectedHabit = new Habit{ CategoryId = selectedCategoryId != 0 ? selectedCategoryId : 1 }; editHabit = true; })"><span class="fa fa-plus"></span></Button>
        </div>

        @if (selectedHabit != null)
        {
            <div id="overlay" class="col-md-12 col-lg-6 d-flex">
                <div class="card flex-grow-1">
                    <div class="card-body">
                        <Button class="close" @onclick="@(() => { selectedHabit = null; })"><span class="fa fa-times"></span></Button>

                        <EditForm style="padding-right: 4rem !important;" Model="@selectedHabit.CategoryId">

                            <InputSelect class="form-control form-control-sm" Value="@selectedHabit.CategoryId" ValueExpression="@(() => selectedHabit.CategoryId)" ValueChanged="async (long val) => { selectedHabit.CategoryId = val; if (!editHabit) { await DataService.SaveHabit(selectedHabit); } }">
                                @foreach (var cat in DataService.CategoryList)
                                {
                                    <option value="@cat.Id">@cat.Description</option>
                                }
                            </InputSelect>

                        </EditForm>

                        @if (editHabit)
                        {
                            <EditForm Model="@selectedHabit" OnValidSubmit="@(async () => { await DataService.SaveHabit(selectedHabit); editHabit = false; })">

                                <div class="input-group my-3">
                                    <InputText class="form-control form-control-sm" @bind-Value="@selectedHabit.Description" placeholder="Add new habit..." />
                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" Type="ButtonType.Submit"><span class="fa fa-save"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { editHabit = false; })"><span class="fa fa-times"></span></Button>
                                    </div>
                                </div>

                                <div><Microsoft.AspNetCore.Components.Forms.ValidationSummary /></div>
                                <DataAnnotationsValidator />
                            </EditForm>
                        }
                        else
                        {
                            <div class="input-group my-3 d-flex">

                                <div class="border p-1 flex-grow-1">@selectedHabit.Description</div>
                                <div class="border p-1">@selectedHabit.TimeList.Count x</div>

                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { editHabit = true; })"><span class="fa fa-edit"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(async () => { await DataService.DeleteHabit(selectedHabit); selectedHabit = null; })"><span class="fa fa-trash-alt"></span></Button>
                                </div>
                            </div>
                        }

                        @foreach (var time in DataService.TimeList.Where(t => t.HabitId == selectedHabit.Id))
                        {
                            @if (editTime && selectedTime == time)
                            {
                                <EditForm Model="@time" OnValidSubmit="@(async () => { await DataService.SaveTime(time); selectedTime = null; editTime = false; })">

                                    <div class="input-group mb-1">
                                        <InputDate class="form-control form-control-sm" @bind-Value="@time.DateTime" placeholder="Set time..." />
                                        <div class="input-group-append">
                                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" Type="ButtonType.Submit"><span class="fa fa-save"></span></Button>
                                            <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { selectedTime = null; editTime = false; })"><span class="fa fa-times"></span></Button>
                                        </div>
                                    </div>

                                    <div><Microsoft.AspNetCore.Components.Forms.ValidationSummary /></div>
                                    <DataAnnotationsValidator />
                                </EditForm>
                            }
                            else
                            {
                                <div class="input-group mb-1 d-flex">
                                    <div class="border p-1 flex-grow-1">@time.DateTime</div>

                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(() => { selectedTime = time; editTime = true; })"><span class="fa fa-edit"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@ButtonSize" @onclick="@(async () => { await DataService.DeleteTime(time); selectedHabit = DataService.HabitDict[time.HabitId]; })"><span class="fa fa-trash-alt"></span></Button>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>