@page "/"
@page "/{RouteParameter}"

<div class="container-fluid px-1 px-sm-0 py-2 py-sm-3 d-flex flex-grow-1">
    <div id="overlay-parent" class="row mx-0 flex-grow-1">

        <div class="col-md-12 col-lg-6 px-1 px-sm-3">

            <div>
                @foreach (Habit habit in DataService.HabitList.Where(habit => habit.IsPinned && 
                                                                             (habit.IsStarred || !DataService.Settings.ShowOnlyStarred) && 
                                                                             (habit.IsOverdue || !DataService.Settings.ShowOnlyOverdue) && 
                                                                             (habit.OverduePercent >= DataService.Settings.ShowPercentMin)))
                {
                    <div class="input-group flex-nowrap my-1">
                        <div class="input-group-prepend flex-grow-1">
                            <div class="btn btn-secondary @State.ButtonSizeClass border border-right-0 flex-grow-1 d-flex" @onclick="@(() => { State.SelectedHabit = habit; })">
                                @if (State.Advanced)
                                {
                                    <div class="m-1">@habit.Id</div>
                                }
                                @if (habit.IsPinned)
                                {
                                    <div class="m-1"><span class="fa fa-fw fa-thumbtack"></span></div>
                                }
                                @if (habit.IsStarred)
                                {
                                    <div class="m-1"><span class="fa fa-fw fa-star"></span></div>
                                }
                                <div class="m-1">@habit.Description</div>
                                <div class="m-1 ml-auto">@(habit.TimeList.Count > 0 ? ToHighestValueString(habit.SinceLastTime) + " ago" : "Never")</div>
                                @if (habit.IsOverdue)
                                {
                                    <div class="m-1 font-weight-bold text-danger">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else if (habit.OverduePercent >= 80)
                                {
                                    <div class="m-1 font-weight-bold text-warning">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else if (habit.TimeList.Count > 1)
                                {
                                    <div class="m-1 font-weight-bold text-info">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else
                                {
                                    <div class="m-1"><span class="fa fa-fw fa-exclamation"></span></div>
                                }
                            </div>
                        </div>
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => OnHabitDone(habit))"><span class="fa fa-fw fa-check"></span></Button>
                        </div>
                    </div>
                }
            </div>

            @if (editCategory)
            {
                <div class="input-group flex-nowrap">
                    <TextEdit Size="@State.Size" @bind-Text="@State.SelectedCategory.Description" Placeholder="Add new category..." />
                    <div class="input-group-append">
                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await DataService.SaveCategory(State.SelectedCategory); editCategory = false; })"><span class="fa fa-fw fa-save"></span></Button>
                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { editCategory = false; })"><span class="fa fa-fw fa-times"></span></Button>
                    </div>
                </div>
            }
            else
            {
                <div class="input-group flex-nowrap">
                    <div class="input-group-prepend">
                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { State.NewCategory(); editCategory = true; })"><span class="fa fa-fw fa-plus"></span></Button>
                    </div>

                    <Select TValue="long" Size="@State.Size" SelectedValue="@State.SelectedCategoryId" SelectedValueChanged="async (long val) => { State.SelectedCategoryId = val; }">
                        <SelectItem Value="0">All categories</SelectItem>
                        @foreach (Category cat in DataService.CategoryList)
                        {
                            <SelectItem Value="@cat.Id">@cat.Description</SelectItem>
                        }
                    </Select>

                    @if (State.SelectedCategoryId > 1)
                    {
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { editCategory = true; })"><span class="fa fa-fw fa-edit"></span></Button>

                            <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await DataService.DeleteCategory(State.SelectedCategory); State.SelectedCategoryId = 0; })"><span class="fa fa-fw fa-trash-alt"></span></Button>
                        </div>
                    }
                </div>
            }

            <div>
                @foreach (Habit habit in DataService.HabitList.Where(habit => !habit.IsPinned && 
                                                                              (habit.IsStarred || !DataService.Settings.ShowOnlyStarred) && 
                                                                              (habit.IsOverdue || !DataService.Settings.ShowOnlyOverdue) && 
                                                                              (habit.CategoryId == State.SelectedCategoryId || State.SelectedCategoryId == 0) && 
                                                                              (habit.OverduePercent >= DataService.Settings.ShowPercentMin)))
                {
                    <div class="input-group flex-nowrap my-1">
                        <div class="input-group-prepend flex-grow-1">
                            <div class="btn btn-secondary @State.ButtonSizeClass border border-right-0 flex-grow-1 d-flex" @onclick="@(() => { State.SelectedHabit = habit; })">
                                @if (State.Advanced)
                                {
                                    <div class="m-1">@habit.Id</div>
                                }
                                @if (habit.IsStarred)
                                {
                                    <div class="m-1"><span class="fa fa-fw fa-star"></span></div>
                                }
                                <div class="m-1">@habit.Description</div>
                                <div class="m-1 ml-auto">@(habit.TimeList.Count > 0 ? ToHighestValueString(habit.SinceLastTime) + " ago" : "Never")</div>
                                @if (habit.IsOverdue)
                                {
                                    <div class="m-1 font-weight-bold text-danger">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else if (habit.OverduePercent >= 80)
                                {
                                    <div class="m-1 font-weight-bold text-warning">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else if (habit.TimeList.Count > 1)
                                {
                                    <div class="m-1 font-weight-bold text-info">( @habit.OverduePercent.ToString("N0") % )</div>
                                }
                                else
                                {
                                    <div class="m-1"><span class="fa fa-fw fa-exclamation"></span></div>
                                }
                            </div>
                        </div>
                        <div class="input-group-append">
                            <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => OnHabitDone(habit))"><span class="fa fa-fw fa-check"></span></Button>
                        </div>
                    </div>
                }
            </div>

            <div class="py-5"></div>

            <Button class="btn btn-lg btn-primary rounded-circle add-habit" @onclick="@(() => { State.SelectedHabit = new Habit{ CategoryId = State.SelectedCategoryId != 0 ? State.SelectedCategoryId : 1 }; editHabit = true; })"><span class="fa fa-fw fa-plus"></span></Button>
        </div>

        @if (State.SelectedHabit != null)
        {
            <div id="overlay" class="col-md-12 col-lg-6 px-1 px-sm-3 d-flex">
                <div class="card flex-grow-1">

                    <div class="card-body p-2 p-sm-3">
                        <Button class="close" @onclick="@(() => { State.SelectedHabit = null; })"><span class="fa fa-fw fa-times text-muted"></span></Button>

                        <p>
                            <span class="m-1" style="cursor: pointer;" @onclick="@(async () => { State.SelectedHabit.IsPinned = !State.SelectedHabit.IsPinned; if (!editHabit) { await SaveHabit(State.SelectedHabit); } })">
                                @if (State.SelectedHabit.IsPinned)
                                {
                                    <span class="fas fa-fw fa-thumbtack"></span><span class="font-weight-bold"> Pinned</span>
                                }
                                else
                                {
                                    <span class="fas fa-fw fa-thumbtack fa-rotate-90"></span><span class="font-italic"> Pin</span>
                                }
                            </span>

                            <span class="m-1" style="cursor: pointer;" @onclick="@(async () => { State.SelectedHabit.IsStarred = !State.SelectedHabit.IsStarred; if (!editHabit) { await SaveHabit(State.SelectedHabit); } })">
                                @if (State.SelectedHabit.IsStarred)
                                {
                                    <span class="fas fa-fw fa-star"></span><span class="font-weight-bold"> Starred</span>
                                }
                                else
                                {
                                    <span class="far fa-fw fa-star"></span><span class="font-italic"> Star</span>
                                }
                            </span>
                        </p>

                        <div>
                            <Select TValue="long" Size="@State.Size" SelectedValue="@State.SelectedHabit.CategoryId" SelectedValueChanged="async (long val) => { State.SelectedHabit.CategoryId = val; if (!editHabit) { await SaveHabit(State.SelectedHabit); } }">
                                @foreach (Category cat in DataService.CategoryList)
                                {
                                    <SelectItem Value="@cat.Id">@cat.Description</SelectItem>
                                }
                            </Select>
                        </div>

                        @if (State.Advanced)
                        {
                            <div class="input-group flex-nowrap my-3">
                                <div class="input-group-prepend">
                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await HabitUp(State.SelectedHabit); })"><span class="fa fa-fw fa-arrow-up"></span></Button>
                                </div>
                                <TextEdit Size="@State.Size" ReadOnly="true" Text="@State.SelectedHabit.Id.ToString()" />
                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await HabitDown(State.SelectedHabit); })"><span class="fa fa-fw fa-arrow-down"></span></Button>
                                </div>
                            </div>
                        }

                        @if (editHabit)
                        {
                            <div class="input-group flex-nowrap my-3">
                                <TextEdit Size="@State.Size" @bind-Text="@State.SelectedHabit.Description" Placeholder="Add new habit..." />
                                <div class="input-group-append">
                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await SaveHabit(State.SelectedHabit); editHabit = false; })"><span class="fa fa-fw fa-save"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { editHabit = false; })"><span class="fa fa-fw fa-times"></span></Button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="input-group flex-nowrap my-3 d-flex">

                                <TextEdit Size="@State.Size" ReadOnly="true" Text="@State.SelectedHabit.Description" />

                                <div class="input-group-append">
                                    <TextEdit Class="rounded-0 border-right-0" Size="@State.Size" ReadOnly="true" Text="@(State.SelectedHabit.TimeList.Count + "x")" VisibleCharacters="@((State.SelectedHabit.TimeList.Count + "x").Length)" />

                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { editHabit = true; })"><span class="fa fa-fw fa-edit"></span></Button>
                                    <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await DataService.DeleteHabit(State.SelectedHabit); State.SelectedHabit = null; })"><span class="fa fa-fw fa-trash-alt"></span></Button>
                                </div>
                            </div>
                        }

                        @if (State.SelectedHabit.TimeList.Count > 1)
                        {
                            <p><span class="fas fa-fw fa-stopwatch"></span> @( "On average, every: " + ToReadableString(State.SelectedHabit.DesiredInterval) )</p>

                            @if (State.SelectedHabit.IsOverdue)
                            {
                                <p><span class="fas fa-fw fa-exclamation"></span><span class="font-weight-bold"> @( "Overdue by: " + ToReadableString(State.SelectedHabit.SinceLastTime - State.SelectedHabit.DesiredInterval) + " ( " + State.SelectedHabit.OverduePercent.ToString("N0") + " % )" )</span></p>
                            }
                        }

                        @foreach (Time time in State.SelectedHabit.TimeList.OrderByDescending(t => t.DateTime))
                        {
                            @if (editTime && State.SelectedTime == time)
                            {
                                <div class="input-group flex-nowrap mb-1">
                                    <DateEdit TValue="DateTime" Size="@State.Size" Date="@time.DateTime" DateChanged="@((dateTime) => { time.DateTime = dateTime.Date + time.DateTime.TimeOfDay; })" />
                                    <TimeEdit TValue="TimeSpan" Size="@State.Size" Time="@time.DateTime.TimeOfDay" TimeChanged="@((timeSpan) => { time.DateTime = time.DateTime.Date + timeSpan; })" />
                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await DataService.SaveTime(time); State.SelectedTime = null; editTime = false; })"><span class="fa fa-fw fa-save"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { State.SelectedTime = null; editTime = false; })"><span class="fa fa-fw fa-times"></span></Button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="input-group flex-nowrap mb-1 d-flex">
                                    @*<DateEdit TValue="DateTime" Size="@State.Size" ReadOnly="true" Date="@time.DateTime" />
                                    <TimeEdit TValue="TimeSpan" Size="@State.Size" ReadOnly="true" Time="@time.DateTime.TimeOfDay" />*@

                                    <TextEdit Size="@State.Size" ReadOnly="true" Text="@(ToReadableString(DateTime.Now - time.DateTime) + " ago")" />

                                    <div class="input-group-append">
                                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(() => { State.SelectedTime = time; editTime = true; })"><span class="fa fa-fw fa-edit"></span></Button>
                                        <Button Color="Color.Primary" Outline="true" Size="@State.Size" @onclick="@(async () => { await DataService.DeleteTime(time); State.SelectedHabit = DataService.HabitDict[time.HabitId]; })"><span class="fa fa-fw fa-trash-alt"></span></Button>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                </div>
            </div>
        }
    </div>
</div>